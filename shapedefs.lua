-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{ 
		
		["wall"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "wall", density = 1, friction = 0.5, bounce = 0.19999999999999998, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -14.5, 14.5  ,  -14.5, -14.5  ,  14.5, -14.5  ,  14.5, 14.5  }
                    }
                    
                    
                    
		}
		
		, 
		["branches"] = {
                    
		}
		
		, 
		["trunk"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   7, 1  ,  5, -1  ,  8, -1  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   17, 5  ,  12, 3  ,  18, 2  ,  19, 4  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   4, -10  ,  5, -1  ,  -8, 1  ,  -7, -10  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1,
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   6, 18  ,  5, -1  ,  7, 1  ,  11, 15  ,  11, 19  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -14, 3  ,  -14, 15  ,  -19, 12  ,  -21, 4  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -19, 12  ,  -14, 15  ,  -19, 15  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   12, 3  ,  7, 1  ,  14, 0  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   11, 15  ,  17, 12  ,  20, 15  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -8, 1  ,  -14, 3  ,  -16, 0  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   21, 11  ,  17, 12  ,  17, 7  ,  22, 9  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   11, 15  ,  7, 1  ,  17, 5  ,  17, 12  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -20, 8  ,  -19, 12  ,  -24, 11  ,  -24, 9  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -8, 1  ,  5, -1  ,  6, 18  ,  -14, 15  ,  -14, 3  }
                    }
                     ,
                    {
                    pe_fixture_id = "trunk", density = 1, friction = 0.1, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -14, 15  ,  6, 18  ,  8, 21  ,  -13, 20  }
                    }
                    
                    
                    
		}
		
		, 
		["enemy"] = {
                    
                    
                    
                    {
                    pe_fixture_id = "enemy", density = 1, friction = 0.2, bounce = 3, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    radius = 13.098
                    }
                    
                    
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
	
	function physics:get(name)
		return unpack(self.data[name])
	end

	function physics:getFixtureId(name, index)
                return self.data[name][index].pe_fixture_id
	end
	
	return physics;
end

return M

